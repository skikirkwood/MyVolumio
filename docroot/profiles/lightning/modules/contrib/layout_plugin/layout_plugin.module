<?php

/**
 * @file
 * Hook implementations for Layout Plugin module.
 */

use \Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\layout_plugin\Layout;

/**
 * Implements hook_help();
 */
function layout_plugin_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.layout_plugin':
      return t('Layout Plugin allows modules or themes to register layouts, and for other modules to list the available layouts and render them. Without a module or theme that provides layouts, or a module that uses them to render something, this module does not do anything. For more information, see the <a href=":layout-plugin-documentation">online documentation for the Layout Plugin module</a>.', [':layout-plugin-documentation' => 'https://www.drupal.org/node/2619128']);
  }
}

/**
 * Implements hook_theme().
 */
function layout_plugin_theme() {
  return Layout::layoutPluginManager()->getThemeImplementations();
}

/**
 * Implements hook_theme_registry_alter().
 */
function layout_plugin_theme_registry_alter(&$theme_registry) {
  Layout::layoutPluginManager()->alterThemeImplementations($theme_registry);
}

/**
 * Implements hook_library_info_build().
 */
function layout_plugin_library_info_build() {
  return Layout::layoutPluginManager()->getLibraryInfo();
}

/**
 * Prepares variables for layout templates.
 *
 * We name it with an underscore so if there is ever a template called 'layout'
 * that this preprocess function doesn't automatically get picked up.
 *
 * @param array &$variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #settings, #layout
 */
function _layout_plugin_preprocess_layout(&$variables) {
  $content = $variables['content'];
  $variables['settings'] = $content['#settings'] ?: [];
  $variables['layout'] = $content['#layout'] ?: [];
}
